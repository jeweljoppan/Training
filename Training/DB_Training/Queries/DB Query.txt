Create database:
CREATE DATABSE SCHOOL;



Drop database:
DROP DATABSE SCHOOL;

Select databse:
USE SCHOOL;

Create table:
CREATE TABLE STUDENT(
                 roll_no MEDIUMINT PRIMARY KEY,
                 name VARCHAR(20),
                 marks TINYINT,
                 STATUS CHAR );

Insert values:
 INSERT INTO STUDENT VALUES
 (1,"ABC",95,'P'),
 (2,"DFG",55,'P');

INSERT INTO inmates (gender)
VALUES ("m");

Alter:
ALTER TABLE STUDENT
 MODIFY marks TINYINT NOT NULL;

Update Query
UPDATE INMATES SET name = "JOHN DOE WHERE roll_no = 1;

Top Clause:
SELECT TOP number|percent column_name(s)
FROM table_name
WHERE [condition];

To fetch the rows with their own preferred order, the SELECT query used would be as follows -

SQL> SELECT * FROM CUSTOMERS
   ORDER BY (CASE ADDRESS
   WHEN 'DELHI' 	 THEN 1
   WHEN 'BHOPAL' 	 THEN 2
   WHEN 'KOTA' 	 THEN 3
   WHEN 'AHMADABAD' THEN 4
   WHEN 'MP' 	THEN 5
   ELSE 100 END) ASC, ADDRESS DESC;

NOT NULL Constraint - Ensures that a column cannot have NULL value.

DEFAULT Constraint - Provides a default value for a column when none is specified.

UNIQUE Constraint - Ensures that all values in a column are different.

PRIMARY Key - Uniquely identifies each row/record in a database table.

FOREIGN Key - Uniquely identifies a row/record in any of the given database table.

CHECK Constraint - The CHECK constraint ensures that all the values in a column satisfies certain conditions.

INDEX - Used to create and retrieve data from the database very quickly.

INNER JOIN

SELECT roll_no, staff.mentor_id, mentor_name, experience FROM mentors 
INNER JOIN staff
ON 
mentors.mentor_id = staff.mentor_id;

to get outer join union right outer and left outer join



ALTER TABLE inmates
ADD COLUMN gender VARCHAR(1);

UPDATE inmates
SET gender = 'M'
WHERE roll_no = 1;

CREATE VIEW boys AS
SELECT name FROM inmates
WHERE gender = 'M';

DROP VIEW BOYS;

CREATE VIEW few AS
SELECT name FROM inmates
WHERE gender = 'F';

CREATE OR REPLACE VIEW few AS
SELECT name FROM inmates 
WHERE gender IS NULL;

SELECT COUNT(roll_no) AS Students, mentor_id
FROM mentors
GROUP BY mentor_id
HAVING Students >= 2;